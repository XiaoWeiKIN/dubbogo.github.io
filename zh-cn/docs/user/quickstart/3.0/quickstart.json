{
  "filename": "quickstart.md",
  "__html": "<h1>Dubbogo 3.0 快速开始</h1>\n<h2>1. 环境安装</h2>\n<h3>1.1 安装Go语言环境</h3>\n<p>go version &gt;= go 1.11</p>\n<p><a href=\"https://golang.google.cn/\">【Go 语言官网下载地址】</a></p>\n<p>将 $GOPATH/bin 加入环境变量</p>\n<h3>1.2 安装序列化工具protoc</h3>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/releases\">【protoc 下载地址】</a></p>\n<h3>1.3 安装 proto-gen-triple 编译插件</h3>\n<pre><code class=\"language-shell\">export GO111MODULE=\"on\"\nexport GOPROXY=\"http://goproxy.io\"\ngo get -u github.com/dubbogo/tools/cmd/protoc-gen-triple\n</code></pre>\n<p>确保上述protoc 和 protoc-gen-triple在系统环境变量内</p>\n<pre><code class=\"language-bash\">$ protoc --version\nlibprotoc 3.14.0\n$  protoc-gen-triple\nWARNING: Package <span class=\"hljs-string\">\"github.com/golang/protobuf/protoc-gen-go/generator\"</span> is deprecated.\n        A future release of golang/protobuf will delete this package,\n        <span class=\"hljs-built_in\">which</span> has long been excluded from the compatibility promise.\n</code></pre>\n<h3>1.4 启动zookeeper</h3>\n<p>选择您喜欢的方式启动zk，如您安装docker-compose可直接从文件启动</p>\n<p>zookeeper.yml:</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">'3'</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">zookeeper:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">zookeeper</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">2181</span><span class=\"hljs-string\">:2181</span>\n    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">on-failure</span>\n</code></pre>\n<pre><code class=\"language-shell\">docker-compose -f ./zookeeper.yml up -d\n</code></pre>\n<h2>2. 编译接口</h2>\n<h3>2.1 编写接口描述文件 helloworld.proto</h3>\n<pre><code class=\"language-protobuf\">syntax = <span class=\"hljs-string\">\"proto3\"</span>;\n<span class=\"hljs-keyword\">package</span> api;\n\n<span class=\"hljs-comment\">// The greeting service definition.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">service</span> <span class=\"hljs-title\">Greeter</span> </span>{\n  <span class=\"hljs-comment\">// Sends a greeting</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">rpc</span> SayHello (HelloRequest) <span class=\"hljs-keyword\">returns</span> (User) {}\n  <span class=\"hljs-keyword\">rpc</span> SayHelloStream (stream HelloRequest) <span class=\"hljs-keyword\">returns</span> (stream User) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1</span>;\n}\n\n<span class=\"hljs-comment\">// The response message containing the greetings</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">message</span> <span class=\"hljs-title\">User</span> </span>{\n  <span class=\"hljs-built_in\">string</span> name = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">string</span> id = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-built_in\">int32</span> age = <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n<h3>2.2 使用安装好的编译工具编译接口</h3>\n<pre><code class=\"language-bash\">protoc -I . helloworld.proto --triple_out=plugins=triple:.\n</code></pre>\n<p>将生成 helloworld.pb.go 文件</p>\n<h2>3. 开启一次RPC调用</h2>\n<p>新建一个项目，运行 <code>go mod init dubbo3-demo</code></p>\n<p>建立如下文件目录：</p>\n<p><img src=\"../../../pic/3.0/overview.png\" alt=\"\"></p>\n<p>client.go文件：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n\t<span class=\"hljs-string\">\"time\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/logger\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/config\"</span>\n\t_ <span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/imports\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo3-demo/api\"</span>\n)\n\n<span class=\"hljs-keyword\">var</span> greeterProvider = &amp;api.GreeterClientImpl{}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetConsumerService(greeterProvider)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-comment\">// init rootConfig with config api</span>\n\trc := config.NewRootConfigBuilder().\n\t\tSetConsumer(config.NewConsumerConfigBuilder().\n\t\t\tSetRegistryIDs(<span class=\"hljs-string\">\"zookeeper\"</span>).\n\t\t\tAddReference(<span class=\"hljs-string\">\"GreeterClientImpl\"</span>, config.NewReferenceConfigBuilder().\n\t\t\t\tSetInterface(<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>).\n\t\t\t\tSetProtocol(<span class=\"hljs-string\">\"tri\"</span>).\n\t\t\t\tBuild()).\n\t\t\tBuild()).\n\t\tAddRegistry(<span class=\"hljs-string\">\"zookeeper\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n\t\tBuild()\n\n\t<span class=\"hljs-comment\">// validate consumer greeterProvider</span>\n\t<span class=\"hljs-keyword\">if</span> err := rc.Init(); err != <span class=\"hljs-literal\">nil</span>{\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\t<span class=\"hljs-comment\">// waiting for service discovery</span>\n\ttime.Sleep(time.Second*<span class=\"hljs-number\">3</span>)\n\n\t<span class=\"hljs-comment\">// run rpc invocation</span>\n\ttestSayHello()\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">testSayHello</span><span class=\"hljs-params\">()</span></span> {\n\tctx := context.Background()\n\n\treq := api.HelloRequest{\n\t\tName: <span class=\"hljs-string\">\"laurence\"</span>,\n\t}\n\tuser, err := greeterProvider.SayHello(ctx, &amp;req)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tlogger.Infof(<span class=\"hljs-string\">\"Receive user = %+v\\n\"</span>, user)\n}\n</code></pre>\n<p>server.go文件：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"context\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/common/logger\"</span>\n\t<span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/config\"</span>\n\t_ <span class=\"hljs-string\">\"dubbo.apache.org/dubbo-go/v3/imports\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"dubbo3-demo/api\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetProviderService(&amp;GreeterProvider{})\n\n\trc := config.NewRootConfigBuilder().\n\t\tSetProvider(config.NewProviderConfigBuilder().\n\t\t\tAddService(<span class=\"hljs-string\">\"GreeterProvider\"</span>, config.NewServiceConfigBuilder().\n\t\t\t\tSetInterface(<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>).\n\t\t\t\tSetProtocolIDs(<span class=\"hljs-string\">\"tripleProtocolKey\"</span>).\n\t\t\t\tBuild()).\n\t\t\tSetRegistryIDs(<span class=\"hljs-string\">\"registryKey\"</span>).\n\t\t\tBuild()).\n\t\tAddProtocol(<span class=\"hljs-string\">\"tripleProtocolKey\"</span>, config.NewProtocolConfigBuilder().\n\t\t\tSetName(<span class=\"hljs-string\">\"tri\"</span>).\n\t\t\tBuild()).\n\t\tAddRegistry(<span class=\"hljs-string\">\"registryKey\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n\t\tBuild()\n\n\t<span class=\"hljs-keyword\">if</span> err := rc.Init(); err != <span class=\"hljs-literal\">nil</span>{\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\t<span class=\"hljs-keyword\">select</span> {}\n}\n\n<span class=\"hljs-keyword\">type</span> GreeterProvider <span class=\"hljs-keyword\">struct</span> {\n\tapi.GreeterProviderBase\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *GreeterProvider)</span> <span class=\"hljs-title\">SayHelloStream</span><span class=\"hljs-params\">(svr api.Greeter_SayHelloStreamServer)</span> <span class=\"hljs-title\">error</span></span> {\n\tc, err := svr.Recv()\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo-go3 GreeterProvider recv 1 user, name = %s\\n\"</span>, c.Name)\n\tc2, err := svr.Recv()\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo-go3 GreeterProvider recv 2 user, name = %s\\n\"</span>, c2.Name)\n\tc3, err := svr.Recv()\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo-go3 GreeterProvider recv 3 user, name = %s\\n\"</span>, c3.Name)\n\n\tsvr.Send(&amp;api.User{\n\t\tName: <span class=\"hljs-string\">\"hello \"</span> + c.Name,\n\t\tAge:  <span class=\"hljs-number\">18</span>,\n\t\tId:   <span class=\"hljs-string\">\"123456789\"</span>,\n\t})\n\tsvr.Send(&amp;api.User{\n\t\tName: <span class=\"hljs-string\">\"hello \"</span> + c2.Name,\n\t\tAge:  <span class=\"hljs-number\">19</span>,\n\t\tId:   <span class=\"hljs-string\">\"123456789\"</span>,\n\t})\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *GreeterProvider)</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(ctx context.Context, in *api.HelloRequest)</span> <span class=\"hljs-params\">(*api.User, error)</span></span> {\n\tlogger.Infof(<span class=\"hljs-string\">\"Dubbo3 GreeterProvider get user name = %s\\n\"</span>, in.Name)\n\t<span class=\"hljs-keyword\">return</span> &amp;api.User{Name: <span class=\"hljs-string\">\"Hello \"</span> + in.Name, Id: <span class=\"hljs-string\">\"12345\"</span>, Age: <span class=\"hljs-number\">21</span>}, <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p>执行 <code>export GOPROXY=&quot;https://goproxy.cn&quot;</code>设置PROXY</p>\n<p>执行<code>go mod tidy</code></p>\n<p>执行 <code>go get dubbo.apache.org/dubbo-go/v3@3.0</code>更新依赖</p>\n<p>如go get 3.0 分支出现错误，则查尝试更换网络环境或者代理</p>\n<p>分别启动服务端和客户端。可在客户端看到输出：</p>\n<pre><code> Receive user = {Name:Hello laurence Id:12345 Age:21 ...}\n</code></pre>\n<p>获得调用结果成功</p>\n<h2>4. 更多</h2>\n<p>细心的读者可以发现，以上例子编写的的服务端可以接受来自客户端的普通RPC、流式RPC调用请求。目前只编写了普通调用的Client，读者可以根据samples库中的例子来尝试编写流式客户端发起调用。</p>\n<p>更多samples可以参阅 <a href=\"../../samples/samples.html\">【dubbo-go-samples】</a></p>\n<p>下一章：<a href=\"../../concept/app_and_interface.html\">【Dubbogo 基本概念】</a></p>\n",
  "link": "/zh-cn/docs/user/quickstart/3.0/quickstart.html",
  "meta": {
    "title": "dubbo-go3.0快速开始",
    "keywords": "快速开始,helloworld,",
    "description": "快速上手dubbo-go3.0，编写一个简单的helloworld应用"
  }
}