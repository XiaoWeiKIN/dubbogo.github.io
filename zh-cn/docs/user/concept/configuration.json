{
  "filename": "configuration.md",
  "__html": "<h1>Dubbogo 配置项</h1>\n<h2>1. 配置结构</h2>\n<h3>1.1 框架配置结构</h3>\n<ul>\n<li>根配置</li>\n</ul>\n<p><img src=\"../../pic/3.0/config-root-config.png\" alt=\"\"></p>\n<ul>\n<li>ProviderConfig</li>\n</ul>\n<p><img src=\"../../pic/3.0/config-provider-config.png\" alt=\"\"></p>\n<ul>\n<li>ConsumerConfig</li>\n</ul>\n<p><img src=\"../../pic/3.0/config-consumer-config.png\" alt=\"\"></p>\n<h3>1.2 全部配置例子</h3>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">application:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo-go</span>\n    <span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">local</span>\n    <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span>\n    <span class=\"hljs-attr\">owner:</span> <span class=\"hljs-string\">zhaoyunxing</span>\n  <span class=\"hljs-attr\">protocols:</span>\n    <span class=\"hljs-attr\">tripleProtocol:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">tri</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20001</span>\n    <span class=\"hljs-attr\">dubboProtocol:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dubbo</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">20000</span>\n      <span class=\"hljs-attr\">params:</span>\n        <span class=\"hljs-attr\">reconnect-interval:</span> <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-attr\">connection-number:</span> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-attr\">heartbeat-period:</span> <span class=\"hljs-string\">5s</span>\n        <span class=\"hljs-attr\">session-timeout:</span> <span class=\"hljs-string\">180s</span>\n        <span class=\"hljs-attr\">pool-size:</span> <span class=\"hljs-number\">64</span>\n        <span class=\"hljs-attr\">pool-ttl:</span> <span class=\"hljs-number\">600</span>\n        <span class=\"hljs-attr\">getty-session-param:</span>\n          <span class=\"hljs-attr\">compress-encoding:</span> <span class=\"hljs-literal\">false</span>\n          <span class=\"hljs-attr\">tcp-no-delay:</span> <span class=\"hljs-literal\">true</span>\n          <span class=\"hljs-attr\">tcp-keep-alive:</span> <span class=\"hljs-literal\">true</span>\n          <span class=\"hljs-attr\">keep-alive-period:</span> <span class=\"hljs-string\">120s</span>\n          <span class=\"hljs-attr\">tcp-r-buf-size:</span> <span class=\"hljs-number\">262144</span>\n          <span class=\"hljs-attr\">tcp-w-buf-size:</span> <span class=\"hljs-number\">65536</span>\n          <span class=\"hljs-attr\">pkg-rq-size:</span> <span class=\"hljs-number\">1024</span>\n          <span class=\"hljs-attr\">pkg-wq-size:</span> <span class=\"hljs-number\">512</span>\n          <span class=\"hljs-attr\">tcp-read-timeout:</span> <span class=\"hljs-string\">1s</span>\n          <span class=\"hljs-attr\">tcp-write-timeout:</span> <span class=\"hljs-string\">5s</span>\n          <span class=\"hljs-attr\">wait-timeout:</span> <span class=\"hljs-string\">1s</span>\n          <span class=\"hljs-attr\">max-msg-len:</span> <span class=\"hljs-number\">1024000</span>\n          <span class=\"hljs-attr\">session-name:</span> <span class=\"hljs-string\">client</span>\n  <span class=\"hljs-attr\">center-config:</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">nacos</span>\n    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:8848</span>\n    <span class=\"hljs-attr\">group:</span> <span class=\"hljs-string\">dubbo</span>\n    <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dubbo</span>\n    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">10s</span>\n    <span class=\"hljs-attr\">params:</span>\n      <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">nacos</span>\n      <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n  <span class=\"hljs-attr\">registries:</span>\n    <span class=\"hljs-attr\">zk:</span>\n      <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">zookeeper</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">3s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:2181</span>\n    <span class=\"hljs-attr\">nacos:</span>\n      <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">5s</span>\n      <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">nacos://127.0.0.1:8848</span>\n  <span class=\"hljs-attr\">consumer:</span>\n    <span class=\"hljs-attr\">registryIDs:</span> <span class=\"hljs-string\">zk</span>\n    <span class=\"hljs-attr\">references:</span>\n      <span class=\"hljs-attr\">GreeterImpl:</span>\n        <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">dubboProtocol</span>\n        <span class=\"hljs-attr\">serialization:</span> <span class=\"hljs-string\">hessian2</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span>\n  <span class=\"hljs-attr\">provider:</span>\n    <span class=\"hljs-attr\">register:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">registryIDs:</span> <span class=\"hljs-string\">zk</span>\n    <span class=\"hljs-attr\">services:</span>\n      <span class=\"hljs-attr\">DubboGreeterImpl:</span>\n        <span class=\"hljs-attr\">protocolIDs:</span> <span class=\"hljs-string\">dubboProtocol</span>\n        <span class=\"hljs-attr\">serialization:</span> <span class=\"hljs-string\">hessian2</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.IGreeter</span>\n      <span class=\"hljs-attr\">TripleGreeterImpl:</span>\n        <span class=\"hljs-attr\">protocolIDs:</span> <span class=\"hljs-string\">tripleProtocol</span>\n        <span class=\"hljs-attr\">serialization:</span> <span class=\"hljs-string\">protobuf</span>\n        <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">com.apache.dubbo.sample.basic.TripleService</span>\n \n</code></pre>\n<h2>2. 框架读取配置方式</h2>\n<h3>2.1 从文件读取</h3>\n<ol>\n<li>需要按照上述配置结构，定义 dubbogo.yml 文件，并在应用启动之前设置环境变量 <code>DUBBO_GO_CONFIG_PATH</code>为 dubbogo.yml 的位置。</li>\n<li>在代码中，调用 config.Load 方法，启动框架。一个例子如下：</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// export DUBBO_GO_CONFIG_PATH= PATH_TO_SAMPLES/helloworld/go-client/conf/dubbogo.yml</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-comment\">// set consumer struct if needed</span>\n    config.SetConsumerService(grpcGreeterImpl)\n    \n    <span class=\"hljs-comment\">// config loader start</span>\n    <span class=\"hljs-keyword\">if</span> err := config.Load(); err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-built_in\">panic</span>(err)\n    }\n    \n    <span class=\"hljs-comment\">// waiting for service discovery finished</span>\n    time.Sleep(<span class=\"hljs-number\">3</span> * time.Second)\n    \n    logger.Info(<span class=\"hljs-string\">\"start to test dubbo\"</span>)\n    req := &amp;api.HelloRequest{\n        Name: <span class=\"hljs-string\">\"laurence\"</span>,\n    }\n    <span class=\"hljs-comment\">// do RPC invocation</span>\n    reply, err := grpcGreeterImpl.SayHello(context.Background(), req)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        logger.Error(err)\n    }\n    logger.Infof(<span class=\"hljs-string\">\"client response result: %v\\n\"</span>, reply)\n}\n</code></pre>\n<h3>2.2 配置 API</h3>\n<p>用户无需使用配置文件，可直接在代码中以 API 的调用的形式写入配置，如前面&quot;快速开始&quot;部分所提供的例子:</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-comment\">// init rootConfig with config api</span>\n    rc := config.NewRootConfigBuilder().\n        SetConsumer(config.NewConsumerConfigBuilder().\n            SetRegistryIDs(<span class=\"hljs-string\">\"zookeeper\"</span>).\n            AddReference(<span class=\"hljs-string\">\"GreeterClientImpl\"</span>, config.NewReferenceConfigBuilder().\n                SetInterface(<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>).\n                SetProtocol(<span class=\"hljs-string\">\"tri\"</span>).\n                Build()).\n            Build()).\n        AddRegistry(<span class=\"hljs-string\">\"zookeeper\"</span>, config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)).\n        Build()\n    \n    <span class=\"hljs-comment\">// validate consumer greeterProvider</span>\n    <span class=\"hljs-keyword\">if</span> err := rc.Init(); err != <span class=\"hljs-literal\">nil</span>{\n        <span class=\"hljs-built_in\">panic</span>(err)\n    }\n    \n    <span class=\"hljs-comment\">// waiting for service discovery</span>\n    time.Sleep(time.Second*<span class=\"hljs-number\">3</span>)\n    \n    <span class=\"hljs-comment\">// run rpc invocation</span>\n    testSayHello()\n}\n</code></pre>\n<p>配置 API 看上去写法较为复杂，但单个配置结构的构造过程都是一致的，参考 Java  Builder 的设计，我们在配置 API 模块选用 <code>New().SetA().SetB().Build()</code>的方式来构造单个配置结构。</p>\n<p>将上述例子中的 rootConfig 构造过程，可以拆解为：</p>\n<pre><code class=\"language-go\">referenceConfig := config.NewReferenceConfigBuilder().\n    SetInterface(<span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>).\n    SetProtocol(<span class=\"hljs-string\">\"tri\"</span>).\n    Build()\n\nconsumerConfig := config.NewConsumerConfigBuilder().\n    SetRegistryIDs(<span class=\"hljs-string\">\"zookeeper\"</span>).\n    AddReference(<span class=\"hljs-string\">\"GreeterClientImpl\"</span>, referenceConfig).\n    Build()).\n\nregistryConfig := config.NewRegistryConfigWithProtocolDefaultPort(<span class=\"hljs-string\">\"zookeeper\"</span>)\n\nrc := config.NewRootConfigBuilder().\n    SetConsumer(consumerConfig).\n    AddRegistry(<span class=\"hljs-string\">\"zookeeper\"</span>, registryConfig).\n    Build()\n</code></pre>\n<h3>2.3 从配置中心读取</h3>\n<p>Dubbogo 服务框架支持将配置文件 'dubbogo.yml' 的内容预先放入配置中心，再通过配置注册中心的地址。在本地 dubbogo.yml 配置文件内只需写入配置中心的信息即可，目前支持作为配置中心的中间件有：apollo、nacos、zookeeper</p>\n<p>可参考<a href=\"https://github.com/apache/dubbo-go-samples/tree/master/configcenter\">配置中心Samples</a></p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n  <span class=\"hljs-attr\">config-center:</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">apollo</span>\n    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">localhost:8080</span>\n    <span class=\"hljs-attr\">app-id:</span> <span class=\"hljs-string\">demo_server</span>\n    <span class=\"hljs-attr\">cluster:</span> <span class=\"hljs-string\">default</span>\n    <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">demo-provider-config</span>\n</code></pre>\n<p>下一章：<a href=\"../samples/samples_repo.html\">【Dubbogo Samples 介绍】</a></p>\n",
  "link": "/zh-cn/docs/user/concept/configuration.html",
  "meta": {
    "title": "Dubbogo的配置",
    "keywords": "基本概念",
    "description": "Dubbogo的配置"
  }
}